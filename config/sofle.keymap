/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        double_space_to_enter: double_space_to_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_SPACE_TO_ENTER";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&kp ENTER>;
        };

        f4_enter: f4_enter {
            compatible = "zmk,behavior-hold-tap";
            label = "F4_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        gresc_ctrl: gresc_ctrl {
            compatible = "zmk,behavior-mod-morph";
            label = "GRESC_CTRL";
            bindings = <&kp ESCAPE>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LGUI|MOD_LSFT|MOD_LALT)>;
        };

        dot_arrow: dot_arrow {
            compatible = "zmk,behavior-hold-tap";
            label = "DOT_ARROW";
            bindings = <&arrow>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        delayed_tap_hold_one: delayed_tap_hold_one {
            compatible = "zmk,behavior-hold-tap";
            label = "DELAYED_TAP_HOLD_ONE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <200>;
        };

        hold_on_tab_mt: hold_on_tab_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_ON_TAB_MT";
            bindings = <&mt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        only_hold: only_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "ONLY_HOLD";
            bindings = <&kp>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        only_tap_none_hold: only_tap_none_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "ONLY_TAP_NONE_HOLD";
            bindings = <&none>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        plain_paste_on_hold: plain_paste_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "PLAIN_PASTE_ON_HOLD";
            bindings = <&paste_plain>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
        };

        monosnap_image_copy: monosnap_image_copy {
            compatible = "zmk,behavior-mod-morph";
            label = "MONOSNAP_IMAGE_COPY";
            bindings = <&kp C>, <&kp LA(LG(C))>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LGUI)>;
        };

        copy_stuff: copy_stuff {
            compatible = "zmk,behavior-hold-tap";
            label = "COPY_STUFF";
            bindings = <&kp>, <&monosnap_image_copy>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
        };

        enter_shift_enter: enter_shift_enter {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER_SHIFT_ENTER";
            bindings = <&single_shift_enter>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        to_layer_on_hold: to_layer_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_LAYER_ON_HOLD";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <1000>;
        };
    };

    macros {
        up_5: up_5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW &kp UP_ARROW>;
            label = "UP_5";
        };

        down_5: down_5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp DOWN_ARROW &kp DOWN &kp DOWN &kp DOWN>;
            label = "DOWN_5";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT &kp LC(SPACE)>;
            label = "ARROW";
        };

        paste_plain: paste_plain {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(V))>;
            label = "PASTE_PLAIN";
        };

        single_shift_enter: single_shift_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(ENTER)>;
            label = "SINGLE_SHIFT_ENTER";
        };
    };

    combos {
        compatible = "zmk,combos";

        two_key_enter {
            bindings = <&kp ENTER>;
            key-positions = <34 35>;
            layers = <0>;
            timeout-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp ESCAPE   &kp N1                             &kp N2                             &kp N3                             &kp N4                    &kp N5                                                         &kp N6                             &kp N7                             &kp N8                                     &to_layer_on_hold 0 N9             &to_layer_on_hold 5 N0  &kp BACKSPACE
&kp TAB      &delayed_tap_hold_one LG(LC(Q)) Q  &delayed_tap_hold_one LG(LS(W)) W  &delayed_tap_hold_one LG(LS(E)) E  &kp R                     &delayed_tap_hold_one LG(LC(T)) T                              &kp Y                              &kp U                              &kp I                                      &delayed_tap_hold_one LG(LS(O)) O  &kp P                   &kp BACKSLASH
&shift_caps  &delayed_tap_hold_one LG(LS(A)) A  &delayed_tap_hold_one LG(LS(S)) S  &delayed_tap_hold_one LG(LS(D)) D  &kp F                     &kp G                                                          &delayed_tap_hold_one LC(LG(H)) H  &kp J                              &kp K                                      &kp L                              &kp SEMI                &kp SQT
&kp LCTRL    &kp Z                              &kp X                              &delayed_tap_hold_one LG(LS(C)) C  &plain_paste_on_hold 0 V  &kp B                              &none          &none        &kp N                              &delayed_tap_hold_one LS(LG(M)) M  &delayed_tap_hold_one LS(LG(COMMA)) COMMA  &dot_arrow 0 DOT                   &kp FSLH                &enter_shift_enter 0 ENTER
                                                &kp LCTRL                          &kp LALT                           &kp LEFT_GUI              &lt 1 SPACE                        &lt 1 SPACE    &lt 2 SPACE  &lt 2 SPACE                        &kp LG(LEFT_ALT)                   &only_hold LA(Y) 0                         &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        symbols {
            display-name = "lower";

            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp TILDE  &kp F1     &kp F2     &kp F3    &kp F4    &kp F5                       &kp F6     &kp F7             &kp F8             &kp F9          &kp F10    &kp F11
&kp GRAVE  &kp N1     &kp N2     &kp N3    &kp N4    &kp N5                       &kp N6     &kp LEFT_BRACE     &kp RIGHT_BRACE    &kp UNDERSCORE  &kp EQUAL  &kp F12
&trans     &kp EXCL   &kp AT     &kp HASH  &kp DLLR  &kp PRCNT                    &kp CARET  &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &kp LPAR        &kp RPAR   &kp PIPE
&trans     &kp EQUAL  &kp MINUS  &kp PLUS  &kp LBRC  &kp RBRC   &trans    &trans  &kp LBKT   &kp RBKT           &kp SEMI           &kp COLON       &kp BSLH   &trans
                      &trans     &trans    &trans    &trans     &trans    &trans  &trans     &kp LC(LG(SPACE))  &trans             &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        navigation {
            display-name = "raise";

            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                |      |      |       |      |       |       |
            // |       | INS  | PSCR | GUI   |       |      |                | PGUP |      |   ^   |      |       |       |
            // |       | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |  DEL  | BKSPC |
            // |       | UNDO | CUT  | COPY  | PASTE |      |      |  |      |      |      |       |      |       |       |
            //                |      |       |       |      |      |  |      |      |      |       |      |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans    &up_5     &trans     &trans   &trans
&trans      &kp INS       &kp PSCRN     &kp K_CMENU   &trans        &trans                          &kp PG_UP  &trans    &kp UP    &trans     &trans   &trans
&trans      &kp LALT      &kp LCTRL     &kp LSHFT     &trans        &kp CLCK                        &kp HOME   &kp LEFT  &kp DOWN  &kp RIGHT  &kp END  &trans
&trans      &kp K_UNDO    &kp K_CUT     &kp K_COPY    &kp K_PASTE   &trans        &trans    &trans  &trans     &trans    &down_5   &trans     &trans   &kp LS(ENTER)
                          &trans        &trans        &trans        &mo 4         &trans    &trans  &trans     &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        connectivity {
            // ----------------------------------------------------------------------------------------------------------------------------
            // | BTCLR  |  BT1    |  BT2    |   BT3   |   BT4   |   BT5   |                  |      |      |       |      |       |       |
            // | EXTPWR | RGB_HUD | RGB_HUI | RGB_SAD | RGB_SAI | RGB_EFF |                  |      |      |       |      |       |       |
            // |        | RGB_BRD | RGB_BRI |         |         |         |                  |      |      |       |      |       |       |
            // |        |         |         |         |         |         | RGB_TOG | |      |      |      |       |      |       |       |
            //                    |         |         |         |         |         | |      |      |      |       |      |

            display-name = "adjust";
            bindings = <
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                               &out OUT_TOG  &sys_reset  &bootloader  &none  &none  &none
&ext_power EP_TOG  &bt BT_CLR_ALL   &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_EFF                            &none         &none       &none        &none  &none  &none
&none              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &none            &none            &none                                      &none         &none       &none        &none  &none  &none
&none              &none            &none            &none            &none            &none            &rgb_ug RGB_TOG    &none  &none         &none       &none        &none  &none  &kp N3
                                    &none            &none            &none            &none            &none              &none  &none         &none       &none        &none
            >;
        };

        code_nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans               &trans  &trans             &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &mt LA(LS(U)) LA(U)  &trans  &kp LG(LC(O))      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp LC(LG(LEFT))     &trans  &kp LC(LG(RIGHT))  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans               &trans  &trans             &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans               &trans  &trans
            >;
        };

        linux {
            display-name = "default";
            bindings = <
&kp ESCAPE   &kp N1  &kp N2     &kp N3    &kp N4    &kp N5                                   &kp N6       &kp N7            &kp N8              &kp N9   &kp N0    &kp BACKSPACE
&kp TAB      &kp Q   &kp W      &kp E     &kp R     &kp T                                    &kp Y        &kp U             &kp I               &kp O    &kp P     &kp BACKSLASH
&shift_caps  &kp A   &kp S      &kp D     &kp F     &kp G                                    &kp H        &kp J             &kp K               &kp L    &kp SEMI  &kp SQT
&kp LCTRL    &kp Z   &kp X      &kp C     &kp V     &kp B        &none          &none        &kp N        &kp M             &kp COMMA           &kp DOT  &kp FSLH  &enter_shift_enter 0 ENTER
                     &kp LCTRL  &kp LGUI  &kp LALT  &lt 1 SPACE  &lt 1 SPACE    &lt 2 SPACE  &lt 2 SPACE  &kp LG(LEFT_ALT)  &only_hold LA(Y) 0  &mo 3
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp PG_UP PG_DN>;
        };
    };
};
